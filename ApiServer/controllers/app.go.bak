package controllers

import (
	"K8APITransform/ApiServer/lib"
	"K8APITransform/ApiServer/models"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"
	//"github.com/GoogleCloudPlatform/kubernetes/pkg/api"
	"github.com/astaxie/beego"
	"net/http"
	//"time"
)

// Operations about App
type AppController struct {
	beego.Controller
}

// IntstrKind represents the stored type of IntOrString.
func NewIntOrStringFromInt(val int) models.IntOrString {
	return models.IntOrString{Kind: models.IntstrInt, IntVal: val}
}

// @Title createApp
// @Description create app
// @Param	body		body 	models.AppCreateRequest	 true		"body for user content"
// @Success 200 {string} "create success"
// @Failure 403 body is empty
// @router / [post]
func (a *AppController) Post() {
	namespace := a.Ctx.Input.Param(":namespace")
	var app models.AppCreateRequest
	err := json.Unmarshal(a.Ctx.Input.RequestBody, &app)
	if err != nil {
		a.Ctx.ResponseWriter.Header().Set("Content-Type", "application/json; charset=utf-8")
		a.Ctx.ResponseWriter.WriteHeader(500)
		fmt.Fprintln(a.Ctx.ResponseWriter, err)
		return
	}
	image := ""
	if app.Warpath == "" {
		////
		image = "reg-5000-gorouter"

	} else {
		image = "" //war to image
	}
	fmt.Printf("%s", image)

	containers := []models.Container{
		models.Container{
			Name:  "reg-5000-gorouter-test",
			Image: "reg-5000-gorouter",
			Ports: []models.ContainerPort{
				models.ContainerPort{
					ContainerPort: app.ContainerPort[0].Port, //
					Protocol:      models.Protocol(app.ContainerPort[0].Protocol),
				},
			},
		},
	}

	var rc = &models.ReplicationController{
		TypeMeta: models.TypeMeta{
			Kind:       "ReplicationController",
			APIVersion: "v1beta3",
		},
		ObjectMeta: models.ObjectMeta{
			Name:   app.Name + "-" + "1",
			Labels: map[string]string{"name": app.Name},
		},
		Spec: models.ReplicationControllerSpec{
			Replicas: 1,
			Selector: map[string]string{"version": app.Name + "-" + "1"},
			Template: &models.PodTemplateSpec{
				ObjectMeta: models.ObjectMeta{
					Labels: map[string]string{"name": app.Name, "version": app.Name + "-" + "1"},
				},
				Spec: models.PodSpec{
					Containers: containers,
				},
			},
		},
	}
	body, _ := json.Marshal(rc)
	status, result := lib.Sendapi("POST", "10.10.103.86", "8080", "v1beta3", []string{"namespaces", namespace, "replicationcontrollers"}, body)
	responsebody, _ := json.Marshal(result)
	if status != 201 {
		a.Ctx.ResponseWriter.Header().Set("Content-Type", "application/json; charset=utf-8")
		a.Ctx.ResponseWriter.WriteHeader(status)
		fmt.Fprintln(a.Ctx.ResponseWriter, string(responsebody))
		return
	}
	var service = models.Service{
		TypeMeta: models.TypeMeta{
			Kind:       "Service",
			APIVersion: "v1beta3",
		},
		ObjectMeta: models.ObjectMeta{
			Name:   app.Name,
			Labels: map[string]string{"name": app.Name},
		},
		Spec: models.ServiceSpec{
			Selector: map[string]string{"name": app.Name},
			Ports: []models.ServicePort{
				models.ServicePort{
					Name:     "default",
					Port:     app.Ports[0].Port,
					Protocol: models.Protocol(app.Ports[0].Protocol),
				},
			},
		},
	}
	targetPort := app.Ports[0].TargetPort
	if targetPort == 0 {
		targetPort = app.ContainerPort[0].Port
	}
	if targetPort != 0 {
		service.Spec.Ports[0].TargetPort = targetPort
	} else {
		service.Spec.Ports[0].TargetPort = app.Ports[0].Port
	}
	if len(app.PublicIPs) != 0 {
		service.Spec.PublicIPs = app.PublicIPs
	}
	body, _ = json.Marshal(service)
	fmt.Println(string(body))
	status, result = lib.Sendapi("POST", "10.10.103.86", "8080", "v1beta3", []string{"namespaces", namespace, "services"}, body)
	responsebody, _ = json.Marshal(result)
	if status != 201 {
		a.Ctx.ResponseWriter.Header().Set("Content-Type", "application/json; charset=utf-8")
		a.Ctx.ResponseWriter.WriteHeader(status)
		fmt.Fprintln(a.Ctx.ResponseWriter, string(responsebody))
		return
	}
	a.Data["json"] = map[string]string{"messages": "create service successfully"}
	a.ServeJson()
}

// @Title get all apps
// @Description get all apps
// @Success 200 {string} "get success"
// @Failure 403 body is empty
// @router / [get]
func (a *AppController) GetAll() {

	a.Data["json"] = map[string]string{"status": "getall success"}
	a.ServeJson()
}

// @Title get all apps
// @Description get all apps
// @Success 200 {string} "get success"
// @Failure 403 body is empty
// @router /:service/start [get]
func (a *AppController) Start() {
	fmt.Println()
}

// @Title createApp
// @Description create app
// @Param	body		body 	models.AppCreateRequest	 true		"body for user content"
// @Success 200 {string} "create success"
// @Failure 403 body is empty
// @router /:service [get]
func (a *AppController) Get() {

	a.Data["json"] = map[string]string{"status": "get success"}
	a.ServeJson()
}

// @Title createApp
// @Description create app
// @Param	body		body 	models.AppCreateRequest	 true		"body for user content"
// @Success 200 {string} "create success"
// @Failure 403 body is empty
// @router /:service [delete]
func (a *AppController) Delete() {

	a.Data["json"] = map[string]string{"status": "delelte success"}
	a.ServeJson()
}

// @Title UpgradeApp
// @Description Upgrade app
// @Param	body		body 	models.AppUpgradeRequest	 true		"body for user content"
// @Success 200 {string} "upgrade success"
// @Failure 403 body is empty
// @router /:service/upgrade [put]
func (a *AppController) Upgrade() {
	namespace := a.Ctx.Input.Param(":namespace")
	service := a.Ctx.Input.Param(":service")
	var upgradeRequest models.AppUpgradeRequest
	err := json.Unmarshal(a.Ctx.Input.RequestBody, &upgradeRequest)
	fmt.Println(upgradeRequest.Containerimage)
	if err != nil {
		a.Ctx.ResponseWriter.Header().Set("Content-Type", "application/json; charset=utf-8")
		a.Ctx.ResponseWriter.WriteHeader(500)
		fmt.Fprintln(a.Ctx.ResponseWriter, err)
		return
	}
	image := ""
	//fmt.Println("%v", []byte(upgradeRequest.Warpath))
	if upgradeRequest.Warpath == "" {
		////
		image = upgradeRequest.Containerimage
	} else {
		image = "" //war to image
	}
	//fmt.Println(image)
	url := "http://10.10.103.86:8080/api/v1beta3/namespaces/" + namespace + "/replicationcontrollers" + "?labelSelector=name%3D" + service
	//fmt.Println(url)
	rsp, err := http.Get(url)
	var rclist models.ReplicationControllerList
	//var oldrc models.ReplicationController
	body, _ := ioutil.ReadAll(rsp.Body)
	//fmt.Println(string(body))
	json.Unmarshal(body, &rclist)
	//fmt.Println(rclist.Items[0].Spec)
	if len(rclist.Items) == 0 {
		a.Ctx.ResponseWriter.Header().Set("Content-Type", "application/json; charset=utf-8")
		a.Ctx.ResponseWriter.WriteHeader(501)
		fmt.Fprintln(a.Ctx.ResponseWriter, string("service with no rc"))
		return
	}
	oldrc := rclist.Items[0]
	oldrc.TypeMeta.Kind = "ReplicationController"
	oldrc.TypeMeta.APIVersion = "v1beta3"
	//fmt.Println(rclist.Items[0])
	//fmt.Println(oldrc.Spec.Template)
	//var newrc ReplicationController
	//fmt.Println(strings.Split(oldrc.ObjectMeta.Name, "-"))
	oldversion, _ := strconv.Atoi(strings.Split(oldrc.ObjectMeta.Name, "-")[1])
	newversion := service + "-" + strconv.Itoa(oldversion+1)

	containers := []models.Container{
		models.Container{
			Name:  upgradeRequest.Containername,
			Image: image,
			Ports: oldrc.Spec.Template.Spec.Containers[0].Ports,
		},
	}

	var newrc = &models.ReplicationController{
		TypeMeta: models.TypeMeta{
			Kind:       "ReplicationController",
			APIVersion: "v1beta3",
		},
		ObjectMeta: models.ObjectMeta{
			Name:   newversion,
			Labels: map[string]string{"name": service},
		},
		Spec: models.ReplicationControllerSpec{
			Replicas: oldrc.Spec.Replicas,
			Selector: map[string]string{"version": newversion},
			Template: &models.PodTemplateSpec{
				ObjectMeta: models.ObjectMeta{
					Labels: map[string]string{"name": service, "version": newversion},
				},
				Spec: models.PodSpec{
					Containers: containers,
				},
			},
		},
	}

	body, _ = json.Marshal(newrc)
	status, result := lib.Sendapi("POST", "10.10.103.86", "8080", "v1beta3", []string{"namespaces", namespace, "replicationcontrollers"}, body)
	responsebody, _ := json.Marshal(result)
	if status != 201 {
		a.Ctx.ResponseWriter.Header().Set("Content-Type", "application/json; charset=utf-8")
		a.Ctx.ResponseWriter.WriteHeader(status)
		fmt.Fprintln(a.Ctx.ResponseWriter, string(responsebody))
		return
	}
	//
	var re = map[string]interface{}{}
	re["create new rc"] = result
	oldrc.Spec.Replicas = 0
	body, _ = json.Marshal(oldrc)
	fmt.Println(string(body))
	_, result = lib.Sendapi("PUT", "10.10.103.86", "8080", "v1beta3", []string{"namespaces", namespace, "replicationcontrollers", oldrc.ObjectMeta.Name}, body)
	re["close old pod"] = result
	//time.Sleep(5 * time.Second)

	_, result = lib.Sendapi("DELETE", "10.10.103.86", "8080", "v1beta3", []string{"namespaces", namespace, "replicationcontrollers", oldrc.ObjectMeta.Name}, []byte{})
	re["delete old rc"] = result

	a.Data["json"] = re
	a.ServeJson()
}

// @Title Roll back App
// @Description roll back app
// @Param	body		body 	models.AppCreateRequest	 true		"body for user content"
// @Success 200 {string} "create success"
// @Failure 403 body is empty
// @router /:service/rollback [put]
func (a *AppController) Rollback() {

	a.Data["json"] = map[string]string{"status": "rollback success"}
	a.ServeJson()
}
